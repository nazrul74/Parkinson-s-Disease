# -*- coding: utf-8 -*-
"""Proyek1-Nazrul.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IffD22sslFdvtR00wPaxhITKJXb0kn2D

# Proyek 1 - Parkinson's Disease
- **Nama:** Nazrul Effendy
- **Email:** nazrul@ugm.ac.id
- **ID Dicoding:** nazrul_effendy

- Dataset: https://www.kaggle.com/datasets/shreyadutta1116/parkinsons-disease/data
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

from google.colab import drive
drive.mount('/content/gdrive')

import warnings
warnings.filterwarnings("ignore" ,category=FutureWarning)

!kaggle datasets download -d shreyadutta1116/parkinsons-disease

!unzip parkinsons-disease.zip

"""## Data Understanding"""

df=pd.read_csv("dataset.csv")
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

df.head()

df.info()

df.shape

"""Dari coding ini, diperoleh bahwa data yang didownload dari kaggle tersebut memiliki 24 kolom dan 1195 baris"""

df.describe()

import seaborn as sns
import matplotlib.pyplot as plt
corrmat = df.corr()
f, ax = plt.subplots(figsize=(10, 10))
sns.heatmap(corrmat, vmax= 1, square=True);

import seaborn as sns
sns.pairplot(df)

"""## Data Preparation"""

df.drop('name',axis = 1,inplace = True)

df.status = np.where(df.status>0.7,1,0)

df.sample(100)

"""
### Pengecekan jumlah variabel yang bernilai Null


"""

df.isnull().sum()

X = df.drop('status',axis =1).values
y = df.status.values

X

"""### Standarisasi variabel"""

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

sc = StandardScaler()
X_scalled = sc.fit_transform(X)

X_scalled

"""## Modeling

### Pemisahan antara data pelatihan dan data pengujian
"""

X_train,X_test,y_train,y_test = train_test_split(X_scalled,y,test_size=0.3,random_state=1)

from sklearn.metrics import accuracy_score

"""### Logistic Regression"""

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(penalty = 'l2')
lr.fit(X_train,y_train)

y_pred = lr.predict(X_test)

Akurasi_LR=accuracy_score(y_test,y_pred)
print(Akurasi_LR)

"""### K-Nearest Neighbor"""

from sklearn.neighbors import KNeighborsClassifier
model2 = KNeighborsClassifier(n_neighbors=3)
model2.fit(X_train,y_train)
y_pred = model2.predict(X_test)
Akurasi_KNN=accuracy_score(y_test,y_pred)
print(Akurasi_KNN)

"""## Deep Learning"""

import tensorflow
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense,Dropout
from keras.callbacks import EarlyStopping

model3 = Sequential()
model3.add(Dense(128,activation = 'relu',input_dim =(22) ))
model3.add(Dropout(0.2))
model3.add(Dense(64,activation='relu'))
model3.add(Dropout(0.2))
model3.add(Dense(1,activation='sigmoid'))
model3.summary()

model3.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
early_stopping = EarlyStopping(monitor='val_loss',
                               patience=5,
                               restore_best_weights=True)

history = model3.fit(X_train,y_train,validation_data=(X_test,y_test),batch_size=32,epochs=100,verbose=True,callbacks=[early_stopping])

y_pred = model3.predict(X_test)

y_pred = np.where(y_pred > 0.7,1,0)

Akurasi_DL=accuracy_score(y_test,y_pred)
print(Akurasi_DL)

"""## Evaluation

### Evaluasi Deep Learning
"""

val_loss = history.history['val_loss']
loss = history.history['loss']

import matplotlib.pyplot as plt
sns.lineplot(x=range(len(val_loss)), y=val_loss, label='Validation Loss')
sns.lineplot(x=range(len(loss)), y=loss, label='Training Loss')
plt.legend()

"""### Perbandingan akurasi ketiga model"""

print(f'Akurasi Logistic Regression: {Akurasi_LR}')
print(f'Akurasi KNN: {Akurasi_KNN}')
print(f'Akurasi Deep Learning: {Akurasi_DL}')

"""Dari proyek ini, diperoleh hasil bahwa Model menggunakan Deep Learning mencapai akurasi tertinggi, yaitu sebesar 93,04%, disusul oleh KNN dan logistic regression masing-masing dengan akurasi 92,20% dan 91,36%"""

